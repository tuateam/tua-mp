// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declare cancel 1`] = `"test cancel"`;

exports[`declare cover 1`] = `
"interface Result { code: number, data: any, msg?: string }
type NoParamsFn = <T = Result>() => Promise<T>

export const api1: {
	a: NoParamsFn
	b: NoParamsFn
	c: NoParamsFn
	d: <T = Result>(params: {
		q?: any,
		w?: any,
	}) => Promise<T>
}

export const api2: {
	a: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
	b: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
}"
`;

exports[`declare directory 1`] = `
"interface Result { code: number, data: any, msg?: string }
type NoParamsFn = <T = Result>() => Promise<T>

export const api1: {
	a: NoParamsFn
	b: NoParamsFn
	c: NoParamsFn
	d: <T = Result>(params: {
		q?: any,
		w?: any,
	}) => Promise<T>
}

export const api2: {
	a: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
	b: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
}"
`;

exports[`declare generate 1`] = `
"interface Result { code: number, data: any, msg?: string }
type NoParamsFn = <T = Result>() => Promise<T>

export const api1: {
	a: NoParamsFn
	b: NoParamsFn
	c: NoParamsFn
	d: <T = Result>(params: {
		q?: any,
		w?: any,
	}) => Promise<T>
}

export const api2: {
	a: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
	b: <T = Result>(params: {
		q: any,
		w?: any,
	}) => Promise<T>
}"
`;
